plot(1:10)
screen(1)
screen(1)
screen(2)
plot(1:10)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
screen(1)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
screen(1)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
?callstack
?callstack
??callstack
plot_corr2d(twod)
plot_corr2d(twod)
traceback()
?traceback
plot_corr2d(twod)
plot_corr2d(twod)
browser()
q()
g
ls()
browser()
plot_corr2d <-
function(Obj, what = Re(Obj$FT), specx = Obj$Ref1, specy = Obj$Ref2,
xlim = NULL, ylim = NULL,
xlab = expression(nu[1]), ylab = expression(nu[2]),
Contour = TRUE, axes = 3, Legend = TRUE, N = 20,
zlim = NULL, Cutout = NULL, ...)
{
close.screen(all.screens = T)
par_old <- par(no.readonly = TRUE)
# calculate x- and y-window range -------------------------------------
if (is.null(xlim)) {
Which1 <- 1:NROW(what)
} else {
Which1 <- which(xlim[1] < Obj$Wave1 & Obj$Wave1 < xlim[2])
}
if (is.null(ylim)) {
Which2 <- 1:NCOL(what)
} else {
Which2 <- which(ylim[1] < Obj$Wave2 & Obj$Wave2 < ylim[2])
}
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
# plot one dimensional spectra top and left ---------------------------
if (!is.null(specy)) {
# Spec Links ------------------------------------------------------
screen(1)
par(xaxt = "n", yaxt="n", mar=c(0, 0, 0, 0), bty="n", yaxs="i")
plot.default(x = max(specy[Which2]) - specy[Which2], y = 1:length(specy[Which2]),
type = "l", lwd = par()$lwd + 1, ann = F)
}
if (!is.null(specx)) {
# Spec oben -------------------------------------------------------
screen(2)
par(xaxt = "n", yaxt = "n", mar = c(0, 0, 0, 0), bty = "n", xaxs = "i")
plot.default(1:length(specx[Which1]), specx[Which1],
type = "l", lwd = par()$lwd + 1, ann = F)
}
# main Part -----------------------------------------------------------
screen(3)
if (is.null(zlim)) {
zlim <- range(what[Which1, Which2])
}
# Number of levels is always odd --------------------------------------
if (N%%2 == 0){
N <- N + 1
}
# Symmetric distribution of color code --------------------------------
Where <- seq(-max(abs(zlim)), max(abs(zlim)), length.out = N)
if (is.null(Cutout)) {
OM <- which(Where < 0)
OP <- which(Where > 0)
} else {
OM <- which(Where <= Cutout[1])
OP <- which(Where >= Cutout[2])
}
COL <- rep("transparent", length(Where))
COL[OM] <- fields::designer.colors(col = c("darkblue", "cyan"), n = length(OM))
COL[OP] <- fields::designer.colors(col = c("yellow", "red", "darkred"), n = length(OP))
COL[(N + 1)/2] <- "transparent"
COL <- COL[which(zlim[1] < Where & Where < zlim[2])]
Where <- seq(zlim[1], zlim[2], length.out = length(COL))
par(xaxt = "n", yaxt = "n", mar = c(0, 0, 0, 0), bty = "n", xaxs = "i", yaxs = "i")
if (Contour == TRUE){
graphics::contour(x = Obj$Wave1[Which1], y = Obj$Wave2[Which2], z = what[Which1, Which2],
col = COL, levels = Where, zlim = zlim, drawlabels = F, ...)
} else {
graphics::image(x = Obj$Wave1[Which1], y = Obj$Wave2[Which2], z = what[Which1, Which2],
col = COL, xlab = "", ylab = "", zlim = zlim, ...)
}
abline(a = 0, b = 1, col = rgb(red = 1, green = 1, blue = 1, alpha = 0.5), lwd = par()$lwd * 2)
par(xpd = NA, xaxt = "s", yaxt = "s", xaxs = "i", yaxs = "i", cex = 1, mar=c(0, 0, 0, 0))
box(which = "figure", lwd = 1)
if ((axes == 1) | (axes == 3)){
axis(side = 1, lwd = 1)
}
if ((axes == 2) | (axes == 3)){
axis(side = 4, las = 2, lwd = 1)
}
mtext(side = 1, xlab, line = 3.5, cex = par()$cex ++ 0.3)
mtext(side = 4, ylab, line = 3.5, cex = par()$cex ++ 0.3)
if(Legend == TRUE){
# oben rechts -----------------------------------------------------
screen(7)
# avoid par(par.old) error from image.plot() by setting par(pin) value positive
par(pin = abs(par()$pin))
if (Contour == TRUE){
fields::image.plot(z = what[Which1,Which2], legend.only = T,
smallplot = c(0.15, 0.3, 0.2, 0.8), col = COL,
axis.args = list(at = quantile(Where, prob = c(0.1, 0.9)),
labels = format(x = quantile(Where, prob = c(0.1, 0.9)), digit = 2)),
zlim = zlim, legend.lab = "", cex = 0.7)
} else {
fields::image.plot(z = what[Which1, Which2],legend.only = T,
smallplot = c(0.15, 0.3, 0.2, 0.8),
col = COL, axis.args = list(at = range(what[Which1, Which2]),
labels = format(x = range(what[Which1, Which2]), digits = 2)),
legend.lab = "", cex = 0.7)
}
}
screen(3, new = F)
close.screen(c(1,2,4,5,6,7))
on.exit(options(par_old), add = TRUE)
}
plot_corr2d(twod)
plot_corr2d(twod)
traceback()
plot_test <-
function(OFF)
{
close.screen(all.screens = T)
par_old <- par(no.readonly = TRUE)
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
# plot one dimensional spectra top and left ---------------------------
# Spec Links ------------------------------------------------------
screen(1)
}
plot_test()
plot_test()
plot_test <-
function(OFF)
{
close.screen(all.screens = T)
par_old <- par(no.readonly = TRUE)
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
# plot one dimensional spectra top and left ---------------------------
# Spec Links ------------------------------------------------------
screen(1)
plot(1:10,t="l")
}
plot_test()
plot_test()
plot_test()
plot_test <-
function(OFF)
{
close.screen(all.screens = T)
par_old <- par(no.readonly = TRUE)
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
# plot one dimensional spectra top and left ---------------------------
# Spec Links ------------------------------------------------------
screen(1)
}
plot_test()
plot_test()
plot_test()
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
plot_test()
plot_test()
plot_test <-
function(OFF)
{
close.screen(all.screens = T)
par_old <- par(no.readonly = TRUE)
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
numb<-split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
cat(numb)
# plot one dimensional spectra top and left ---------------------------
# Spec Links ------------------------------------------------------
screen(1)
}
plot_test()
plot_test()
plot_corr2d(twod)
plot_test()
plot_test()
plot_test()
plot_test()
plot_test()
plot_test()
plot(1:10)
plot(1:10)
plot_test()
plot(1:10)
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
plot_test()
plot_test()
plot_test <-
function(OFF)
{
par_old <- par(no.readonly = TRUE)
close.screen(all.screens = T)
plot.new()
# create splitscreen for plotting -------------------------------------
OFF <- 0.05
numb<-split.screen(rbind(c(0, 0.15 + OFF, 0.15 + OFF, 0.85 - OFF),          # Spektrum Links
c(0.15 + OFF, 0.85 - OFF, 0.85 - OFF, 1),          # Spektrum Oben
c(0.15 + OFF, 0.85 - OFF, 0.15 + OFF, 0.85 - OFF), # Main
c(0.85 - OFF, 1, 0.15 + OFF, 0.85 - OFF),          # Spektrum/Legende rechts
c(0.15 + OFF, 0.85 - OFF, 0, 0.15 + OFF),          # unten
c(0, 0.15 + OFF, 0.85 - OFF, 1),                   # oben links
c(0.85 - OFF, 1, 0.85 - OFF, 1)                    # oben rechts
)
)
cat(numb)
# plot one dimensional spectra top and left ---------------------------
# Spec Links ------------------------------------------------------
screen(1)
}
plot_corr2d(twod)
plot_corr2d(twod)
plot_test()
plot_test()
plot_test()
plot_test()
?plot.new
build()
check()
build()
check()
install()
plot_corr2d(twod)
plot_corr2d(twod)
rm(list=ls())
data(FuranMale)
twod<-corr2d(FuranMale,Ref1=FuranMale[1,])
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2d(twod)
plot_corr2din3d(Re(twod$FT),projection=T,reduce=3)
plot_corr2d(twod)
locator()
build()
check()
install()
build()
install()
plot_corr2d
build()
check()
install()
(twod)
plot_corr2d(twod)
is.corr2d(twod)
library(devtools)
setwd("C:/Users/ro63zic/Desktop/corr2d")
use_vignette("my-vignette")
kdown
")
install.packages("rmarkdown
")
)
""
)
install.packages("rmarkdown")
install.packages("knitr")
use_vignette("my-vignette")
library(RSkittleBrewer)
install.packages("RSkittleBrewer")
vignette(package="devtools")
vignette(package="roxygen2")
vignette("roxygen2", "roxygen2")
vignette(package="roxygen2")
vignette("roxygen2", "rd")
vignette("rd", "roxygen2")
setwd("C:/Users/ro63zic/Desktop/corr2d")
library(devtools)
roxygen2::roxygenize()
check()
library(knitr)
install.packages("knitr")
check()
build()
install()
build(binary=T)
set_path('C:/Rtools/bin')
setwd("C:/Users/ro63zic/Desktop/corr2d")
roxygen2::roxygenize()
library(devtools)
library(knitr)
roxygen2::roxygenize()
set_path('C:/Rtools/bin')
check()
build()
install()
data(FuranMale)
twod<-corr2d(FuranMale,Ref1=FuranMale[1,])
plot_corr2d(twod)
twod<-corr2d(FuranMale,Ref1=FuranMale[7,])
showConnections()
twod<-corr2d(FuranMale,Ref1=FuranMale[1,])
showConnections()
plot_corr2d(twod)
plot_corr2din3d(Re(twod$FT),projection=T,reduce=3)
plot_corr2d(twod)
citation("corr2D")
setwd("C:/Users/ro63zic/Desktop/corr2d")
library(devtools)
set_path('C:/Rtools/bin')
check()
build()
install()
library("fields", lib.loc="~/R/R-3.2.4revised/library")
install.packages("fields")
install.packages("fields")
install()
library(devtools)
install()
R CMD Rd2pdf corr2d
R CMD Rd2pdf corr2d
check(manual = T)
pack <- "corr2D"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
")
()
))
""
revdep_check("corr2D")
revdep_check()
library(devtools)
use_readme_rmd()
use_build_ignore("NEWS.md")
use_build_ignore("README.md")
use_readme_rmd()
library("rmarkdown", lib.loc="~/R/R-3.2.4revised/library")
?devtools
library(devtools)
?devtools
?build_win
library(rmarkdown)
revdep_check()
check()
check()
roxygen2::roxygenize()
check()
build_win()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
check()
build()
install()
installr:updateR()
installr::updateR()
roxygen2::roxygenize()
library(devtools)
install.packages(c("cluster", "curl", "devtools", "evaluate", "formatR", "git2r", "gmailr", "GSIF", "gstat", "highr", "HistData", "Hmisc", "installr", "jsonlite", "knitr", "lintr", "Matrix", "nleqslv", "nlme", "openssl", "plotKML", "plotrix", "RcppArmadillo", "rgdal", "rmarkdown", "sp", "stringi", "survival", "testthat", "zoo"))
roxygen2::roxygenize()
library(devtools)
library(rmarkdown)
install.packages("devtools")
library(devtools)
library(RSkittleBrewer)
install.packages(RSkittleBrewer)
install.packages("RSkittleBrewer")
installr::updateR()
install.packages(c("nlme", "survival"))
roxygen2::roxygenize()
library(devtools)
library(rmarkdown)
check()
build()
install()
build_win()
check()
build()
install()
build_win()
library(devtools)
?release
?release_checks
library(devtools)
build()
set_path('C:/Rtools/bin')
build(binary=T)
roxygen2::roxygenize()
roxygen2::roxygenize()
package?corr2D
use_vignette("corr2D")
use_vignette("corr2D-vignette")
library(devtools)
use_vignette("corr2D-vignette")
